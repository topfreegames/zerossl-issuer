# ZeroSSL Issuer Project Rules

## Development Process

### Code Changes
1. Review existing code and tests before making changes
2. Follow project structure and patterns
3. Keep changes focused and minimal
4. Document changes in code and commit messages
5. Update API documentation when changing CRDs
6. Update the memory bank in `.memories` directory after significant changes

### Memory Bank Maintenance
1. ALWAYS use `.memories` directory as the official memory bank location
2. Update relevant memory bank files after implementing new features:
   - `systemPatterns.md`: Update for architectural changes
   - `techContext.md`: Update for technical implementation details
   - `progress.md`: Update completed and in-progress items
   - `activeContext.md`: Update current status and focus areas
   - `productContext.md`: Update for user-facing feature changes
3. Memory update requirements:
   - Add new features to appropriate sections
   - Update status of existing features
   - Document new patterns and approaches
   - Keep implementation details accurate
4. Memory update timing:
   - After completing a feature
   - After modifying core architecture
   - After adding new dependencies
   - After changing API structure

### Testing Requirements
1. ALWAYS review and update tests after code changes:
   - Unit tests in the same package
   - Integration tests if controller logic changes
   - E2E tests for full workflow changes
   - Sample manifests for new features
2. Test coverage requirements:
   - Unit tests for all new functions
   - Integration tests for controller changes
   - E2E tests for user workflows
3. Test quality checklist:
   - Tests are descriptive and well-organized
   - Edge cases are covered
   - Error conditions are tested
   - Resource cleanup is handled
   - Secrets and sensitive data are properly managed

### Code Review Process
1. Self-review checklist:
   - Code follows project patterns
   - Tests are comprehensive
   - Documentation is updated
   - CRDs are regenerated if needed
   - Samples are updated
   - Memory bank is updated
2. Testing verification:
   - All tests pass locally
   - Coverage is maintained or improved
   - New features have example tests
   - Security considerations are tested

## Project Standards

### API Design
1. Follow cert-manager patterns
2. Use proper validation
3. Document all fields
4. Handle versioning properly

### Security Practices
1. No sensitive data in specs
2. Use secret references
3. Validate secret access
4. Follow RBAC best practices

### Controller Implementation
1. Proper error handling
2. Status updates
3. Event recording
4. Resource cleanup

### Documentation
1. Keep README current
2. Document API changes
3. Update examples
4. Include troubleshooting
5. Keep memory bank in `.memories` accurate and up-to-date

## Testing Guidelines

### Unit Tests
1. Test package functionality
2. Mock external dependencies
3. Cover error cases
4. Validate input/output

### Integration Tests
1. Test controller logic
2. Verify reconciliation
3. Test with real resources
4. Handle cleanup

### E2E Tests
1. Test full workflows
2. Verify metrics
3. Test with real cluster
4. Clean up resources

### Test Maintenance
1. Keep tests current
2. Remove obsolete tests
3. Update for API changes
4. Maintain test documentation 

## Memory Bank Organization

### Core Memory Files
1. `systemPatterns.md`: System architecture and design patterns
2. `techContext.md`: Technical details and implementation specifics
3. `progress.md`: Project progress tracking and status
4. `activeContext.md`: Current focus areas and recent changes
5. `productContext.md`: User-facing features and product details
6. `projectbrief.md`: Project overview and goals

### When to Update Memory
1. After implementing a new feature
2. After fixing a significant bug
3. After changing architecture or design patterns
4. After adding new dependencies or technologies
5. After modifying API structure or behavior 